**********************************************************************************************
***************************************** CADAC++ ********************************************
**********************************************************************************************
************************* GHAME6 6DoF Hypersonic Vehicle Simulation  **************************
**********************************************************************************************
************************* Academic Software, distribution unlimited **************************
**********************************************************************************************

* Release 3.1 - 25 Oct 2013 Compatible with MS C++ v12 (2013) 
* Release 3.0 - 19 June 2013 Compatible with MS C++ 10 and prior versions
* Release 2.0 - 5 April 08: Opens in MS C++ 8, and compiles also with MS C++ 9
* Release 1.0 - 1 July 05

* Features of GHAME simulation
	* 6 DoF, elliptical Earth, WGS84
	* Hypersonic Vehicle (multiple instantiation, limited to 9)
		aerodynamic tables, functions of Mach and alpha
		multi-cycle propulsion
		autopilot: rate and acceleration feedback
		midcourse guidance
		GPS and Kalman filter
		star tracker
		with exo-atmospheric, post-boost transfer vehicle with LTG guidance
		with exo-atmospheric interceptor, rendezvous and intercept guidance with seeker
	* 'Satellite' 3 DoF over spherical Earth (multiple instantiation, limited to 5)
	* 'Radar' fixed ground based (one instantiation only)
	* Hierarchical class structure

								      Cadac
								  /     |      \
							 Round6	  Round3	Ground0
							   |	    |          |
						     Hyper   Satellite    Radar

	* Event scheduling for hyper vehicle with insertion of new data
	* Modular structure and communication
	* Variable types: real (double precision), integer, vector, matrix 
	* Common communication bus for all objects
	* Output compatible with CADAC Studio
	* Single step 'modified midpoint' integration, variable step size 
	* Matrix operations executed just like scalar operations 
	* Table look-up with linear interpolation for 1,2 and 3 independent variables
	* CADAC++ written for full-width console display (MS Windows XP, Vista, 7)
	* Compiler: Microsoft Visual C++ 8, 9, 10, 12 ANSI/ISO Std 1998
	* System of units: SI (exceptions have an x appended)
	* Monte Carlo capability

* Use of CADAC++ simulations
	* Engineering design and evaluation of aerospace vehicles
	* Focus is on the high fidelity hypersonic vehicle with its two upper stages
	   as it interacts with the lower fidelity ground radar and satellites (space station)

* Terminology:
	'vehicles' means hypersonic vehicle (with upper stages), ground radar, or satellites
	'HYPER6' is the identifier of the hypersonic vehicle with two upper stages 
	         object of class 'Hyper', 6 DoF fidelity  
	'SAT3' is an identifier of a satellite or space station object of class 'Satellite', 3 DoF fidelity
	'RADAR0' is an identifier of a ground radar object of class 'Radar', Earth fixed

* Input file 'input.asc':
	* Upper case words are key-words
	* Every block of data starts with a key-word and ends with 'END'
	* Comments identified by leading '//' either on new-line or after data entry
	* Comments permitted everywhere, except between 'OPTIONS' and 'VEHICLES'
	* No blank lines between MODULES ... END
	* First line must start with 'TITLE'
	* Lines of comments between TITLE and OPTIONS limited to 45
	* OPTIONS line determines output:
		y_scrn:		'HYPER6'-object data are displayed on  screen in 'scrn_step' intervals 
		y_comscrn:	the 'combus' data are written to the screen ('HYPER6' and 'SAT3' objects)
		y_events:	'events' are written to screen
		y_doc:		the module-variables are written to file 'doc.asc'; file 'input.asc'
					  is documented, and misspellings are identified; the previous 'input.asc'
					  file is saved as 'input_copy.asc'  
		y_tabout:	screen output is written to file 'tabout.asc' (without 'events')
		y_plot:		plotting data are written to files 'ploti.asc', i=1,2,3,...th-objects
		y_stat:		statistical data are written to files 'stati.asc', i=1,2,3,...th-objects
		y_merge:	files 'ploti.asc', i=1,2,3,... are merged to file 'plot.asc'
					  and  'stati.asc', i=1,2,3,... are merged to file 'stat.asc'
		y_traj:		the 'combus' data are written to file 'traj.asc' for plotting 
	* Any combination of y_scrn, y_events and y_comscrn is permittted
	* 'VEHICLES' must be followed by the number of total vehicle objects (HYPER6, SAT3,and RADAR0)
	* 'HYPER6' objects must precede 'SAT3'
	* Use only one 'RADAR0' object 
	* Assign values to variables without equal sign!
	* Real and integer variables can be used as input, but not vector variables
	* Events, only possible for 'HYPER6' objects, start with 'IF watch variable' and end with 'ENDIF'. 
		Number of events limited by NEVENT. Number of new variables are limited by 'NVAR'.
	    Any module-variable can serve as watch variable
		  But do not use 'event_time' as watch variable in the first event criteria, rather use 'time'
		Event criteria: >, =, <
	* Characters after the vehicle objects 'HYPER6','SAT3'.'RADAR0' may be inserted to identify the
		individual objects
	* The timing is governed by the time step variables (seconds)
		scrn_step	output to screen and tabout.asc
		plot_step	output to plot files
		traj_step	output to traj.asc file
		com_step	output of 'combus' to screen 
		int_step	integration step (optionally modified by 'int_step_new' at 'event')
	* Tabular data is read from data files, whose names are declared after the key words 
	   'DATA_DECK' and 'PROP_DECK'. One, two, and three-dim table look-ups are provided with
	    constant extrapolation at the upper end and slope extrapolation at the lower end
	* 'ENDTIME' defines the termination time of the run
	* 'STOP' must be the last entry

* Output:
	* Files 'ploti.asc', 'plot.asc', 'traj.asc' can be plotted using CADAC Studio
	* Output to screen has two 'time=0' blocks. 1st is written after module initialization,
		2nd is written after first integration (integration 'time' is incremented after
		execution of all code
	* First entry to 'ploti.asc', 'plot.asc', 'traj.asc' is at 'time=0', after first
		 integration step
	* Variable names displayed on screen are truncated to 14 characters
	* Vector (3x1) output is automatically decomposed into components

* Output files
	* For primary objects only:
		'ploti.asc', i=1,2,3... # of primary objects, may be merged into 'plot.asc' file
			output variables are identified by "plot" in the variable definition statement
			output interval given by 'plot_step'
		'stati.asc', i=1,2,3... # of primary objects, may be merged into 'stat.asc' file,
			contain plot data recorded only at every event and at intercept for stochastic processing 
	* For primary and secondary objects
		'traj.asc' records variables of all objects from 'combus'
			output variables are identified by "com" in the module-variable definition statement
			output interval given by traj_step

* Modules
	* Modules represent the model of a physical component of a system
	* The calling sequence is established in 'input.asc'
	* Each module may consists of as many as four parts ('def' and 'exec' are mandatory):
		def		definition of module-variables (called once)
		init	initial calculations (optional, called once)
		exec	actual module execution (called once every integration)
		term	terminal calculations (optional, called once, not used in GHAME sims)
	* Modules communicate amongst each other by module-variables, stored in arrays
		 'round6[]', 'hyper[]', 'round3[]', 'satellite[]','ground0[]', and radar[]'
	* 'HYPER6' objects use 'round6[]' and 'hyper[]' arrays
	* 'SAT3' objects use 'round3[]' and 'satellite[]' arrays
	* 'RADAR0' objects use 'ground0[]' and 'radar[]' arrays
	* Make sure that the global constants "NROUND6', 'NHYPER', 'NROUND3', 'NSAT', NGROUND0', and 'NRADAR' 
		are large enough for dimensioning 'round6[]','hyper[]',round3[],'satellite[]',ground0[]',and'radar[]' 
	* The module-variables are defined in the 'def_xxx' functions (xxx = module name)
	* Module-variables can be real (double), integers; 3x1 or 3x3 matrices (capitalized)
	* Follow the examples in the 'def_xxx' functions to specify module-variables
	* The following sequence must be maintained in the definition: 
		"name",inial values,"int","definiton","declaring module","purpose","output"
		 Note: "name" must be lower case for real and integer variables;
			   "name" must be upper case for 3x1 and 3x3 vectors and matrices
			   "name" is a literal string; no white spaces (they will become part of the name)
			   "int" is present only for integers
	* Meaning of abbreviations in the module-variable definitions:
		"int" integer variable
		"data" input data
		"init" initialization
		"state" state variable to be integrated
		"diag" diagnostic output, not used by other modules
		"out" output to other modules
		"save" saved value for next integration cycle		 
	* Use key-words to select module-variables for output (used with 'OPTIONS' in 'input.asc'):
		"scrn" scrolled to screen and written to 'tabout.asc'
		"plot" written to 'ploti.asc', i=1,2,3,... and merged to 'plot.asc'; also for 'stati.asc' and 'sat.asc'
		"com" stored in 'combus', scrolled to screen and written to 'traj.asc'
	* Module-variables are localized in module-functions by 'Variable' class member functions:
		real(), integer(), vec(), mat()
			example: double alphax=round6[144].real();
	* Module-variables are loaded into module-variable arrays by 'Variable" class member functions:
		gets(name) for real and integer
		gets_vec(NAME) for 3x1 vectors
		gets_mat(NAME) for 3x3 matrices
			scalar example: round6[144].gets(alphax);
			vector example: hyper[305].gets_vec(WBICI);
			matrix example: hyper[315].gets_mat(TBIC);
	* Module-variables are documented in file 'doc.asc'
	    'doc.asc' file must be in project directory to document 'input.asc' 
	* Timing variables
		Timing variables are established in the 'kinematics' module
		The 'kinematics' module must be called first
		'time', round6[0], is the time of the trajectory since start (same for all vehicle objects)
		'event_time' round6[1], is the time elapsed since initiation of an event
			Do not use 'event-time' as the watch variable of the first event

* Communication bus 'combus'
	* 'combus' stores and makes available a packet of data of each vehicle to other vehicles
	* Data loaded into packet are identified by keyword 'com' in the module-variable definition
	* Sequence of loading data is estabished first by the vehicle class hierarchy, and then by the
	   module calling sequence. (verifiable by the 'combus' screen display)  
	* 'Packet' consists of:
		'id'	  identification code of vehicle object ('h'=hyper, 't'=satellite, 'r'=radar)
		'status'  alive=1, dead=0
		'ndata'	  number of module-variables in data array
		'data[]'  data of module-variables selected by "com"
	* Packets are recorded at 'int_step' intervals
	* 'combus' data are scrolled to screen (use:'y_comscrn') and/or written to 'traj.asc' (use:'y_traj')
		at 'com_step' intervals  ('input.asc')
	* To subscribe to 'combus' data, use 'Packet' class member functions:
		get_id()
		get_status()
		get_ndata()
		get_data()	
			Example: Variable *data_cj=combus[i].get_data();
				double dvbe_cj=data_cj[k].real();
				i = 0,1,2,... packet # in ;'combus' container (same as vehicle number)
				j = i+1 = vehicle object sequence established by 'input.asc' vehicle sequence
				k = 0,1,2,... variable index established by the "com" sequence (see 'doc.asc')
	* Limitations
		Module-variables can only be integers, real or (3x1)vectors, not matrices
		Module-variables in the 'data[]' array are identified by their sequential number
		 	 
* Monte Carlo
	* MC runs are identified in 'input.asc' after 'TITLE' line by key word 'MONTE' 
		 and two attributes: 'number of runs' and 'seed_value'		 
	* In 'input.asc' any module-variable can be initialized by the following distributions
	  identified by their leading key-word (capitalized):
		UNI vname min max  | uniform distribution of variable 'vname' between 'min' and 'max'
		GAUSS vname mean sigma  | Gaussian (normal) distribution with 'mean' and 'sigma'
		RAYL vname mode  | Rayleigh distribution with 'mode'(peak value of pdf)
		EXP vname density  | Exponential distribution with 'density' (events per unit variable)
	* In 'input.asc' a module-variable can be given a Gaussian correlated noise (Markov)  
	  throughout the run. This module-variable must not be given a value within the modules.
		MARKOV vname sigma bcor  | Markov process of zero mean, one 'sigma' distribution and 
									bandwith (correlation factor) 'bcor' in Hz
	* Stochastic variables have no effect if introduced in 'input.asc' during 'Events'									
	* If 'MONTE 0' the mean values of the distributions are used. Specifically:
		UNI vname = (max-min)/2
		GAUSS vname = mean
		RAYL vname = mode
		EXP vname = density | 'density'=units of variables to be traversed until next event occurs
		MARKOV vname = 0
	* Output
		Multiple MC traces are recorded vs time on each file 'ploti.asc', i=1,2,... and merged in 'plot.asc'
			(only 'HYPER6' objects)
		Plot data are also recorded at every event and at intercept on 'stati.asc', i=1,2... and
			merged on 'stat.asc' (only 'HYPER6'objects)
		All objects are recorded on 'traj.asc' and their MC replications
		CADAC Studio provides post processing and plotting capability
			KPLOT-2DIM plots 'ploti.asc', 'plot.asc', 'traj.asc'
			KPLOT-PITA plots 'traj.asc' in three dimensions
			KPLOT-GLOBE plots 'ploti.asc', 'plot.asc', 'traj.asc' over the globe
			KPLOT-BIVAR analyzed 'stat.asc' data and plots CEP and error ellipses
			KPLOT-HISTO analyzes 'stat.asc' data and plots single variable histograms
			MCAP averages 'ploti.asc' trajectories and displays mean and std deviation
			OpenGlobe plots 'ploti.asc', 'plot.asc', 'traj.asc' over the globe (similar to KPLOT-GLOBE)
			 
* Automatic error checking of module-variable definitions (set OPTIONS: 'y_doc')
	* Rule violations are flagged in 'doc.asc'
		* if a location is reused -> Error flag '*': duplicate location
			Correction: in module-definitions find duplicate use and correct it
		* if a name is reused -> Error flag 'A': duplicate name
			Correction: in module-defintions find duplicate use and correct it
	* Module-variable misspelled in 'input.asc' will be appended with error message
		Correction: get proper spelling from 'doc.asc' and make correction in 'input.asc'  	 
	* If 'input.ac' contains a reused name, it will be corrupted during execution
		Correction: Deconflict reuse and use 'input_copy.asc'   	 

* Programming Conventions 
	* Program in compliance with ANSI/ISO 98 only
	* Write compact code: no unnecessary white spaces
	* Global constants have all caps
	* Class and structure names start with capital letter, otherwise lower case
	* Compounded names are separated by underscore
	* Function names have all lower case letters
	* File names have all lower case letters
	* Do not make a single letter a variable name (exceptions counters, indices)
	* In comments use single quotes to identify names in program (variable, function, class, etc)
	* Comments occupy their own full line(s); start with lower case
	* In-line comments for debugging only; start with lower case 
	* In Modules: vectors and tensors are named with all caps, scalars all lower case
	* In input files: Key words have all caps
	* Counters start at 0 (offset)
	* Be careful using 'static' variables in Modules; they will apply to ALL objects

* Restrictions
	* Module-variables can only be scalar 'int','double'; and Matrix(3,1),Matrix(3,3) with 'double' elements
	* 'input.asc' only supports scalar 'int' and 'double'
	* Overloaded operator [] supports only vectors (of any dimension, but not matrices)
	* Max # of hyper vehicles is nine (only restricted because of the one digit labeling)
	* Max # of satellites is five (limited by the # of track files in 'radar_modules.pp', 'seeker()')
	* Only one ground radar is permitted

* Helps
	* Check sizing of arrays for adequate space (located in 'global_constants.hpp')

			 NROUND6	size of 'round6' module-variable array
			 NHYPER		size of 'hyper' module-variable array 
			 NROUND3	size of 'round3' module-variable array 
			 NSAT		size of 'satellite' module-variable array
			 NGROUND0	size of 'ground0' module-variable array
			 NRADAR     size of 'radar' module-variable array
			 NEVENT		max number of events
			 NVAR		max number of variables to be input at every event
			 NMARKOV	max number of Markov noise variables

	* Do not use '=' sign in any assignments of 'input.asc'; except in 'event' criteria 
	* Make sure spelling of variable names is correct in 'input.asc'
	* When execution problems arise, check first array allocations in 'global_constants.hpp'
	* If only banner (TITLE) appears on console, a hang-up occurred because of errors in 'input.asc'
		Check for misspellings and check that all variables have a value assigned without equal sign 
	* In 'input.asc' make sure that entries for each vehicle object terminate with 'END' 			
	* When you define vectors and matrices in 'def_xxx()' make sure that ALL elements are initialized 
	* Programming with the 'Matrix' class
		Multiplying a matrix with a scalar, the scalar must be appended. Example: Matrix VD=ABII*int_step;
		Dividing two matrix components is legitimate. Example:  double angle=VD[1]/VD[2];
	* If 'input.asc' is not beeing refreshed, set: 'y_doc'	     

* Code Debugging Helps
	* 'Heap' problems during debug with following message:
			 " If this ASSERT fails, a bad pointer has been passed in. It may be
			   totally bogus, or it may have been allocated from another heap.
			   The pointer MUST come from the 'local' heap."

			 _ASSERTE(_CrtIsValidHeapPointer(pUserData));

	  >>> If this problem occurs, check the array dimensioning in 'global_constants.hpp'
	* 'Debug Assertion Failed': possibly caused by not initializing a matrix with its dimensions.
		the debugger shows that the 'Matrix' destuctor cannot delete the object
	* Class member variable: 
		do not declare a class member variable as local variable in a function
	* Beware of abs(); it will return an integer. For real variables use fabs()
	* Memory Error: Make sure that all 'fstream' objects are passed by reference
	* Debugger stops with 'code 1' if an out-of-bounds element of a matrix is displayed in the watch window
	* In the watch window, if you use the overloaded operator [] to display matrix elements, delete it after use 
	* If you get "fatal error C1001: INTERNAL COMPILER ERROR", set compiler optimization to 'default'
	
* Hotline: mastech.zipfel@cox.net			


			