**********************************************************************************************
***************************************** CADAC++ ********************************************
**********************************************************************************************
******************************* MAGSIX: Magnus Rotor Simulation  *****************************
**********************************************************************************************

* Release 1.1, Oct 2013, Compatible with C++ V12 (2013)
* Release 1.0, June 2013, First release
	Built with MS Visual C++ 10; compatible with MS Visual C++ 8 & 9

* Features of simulation
	* Restricted 6 DoF, flat Earth
		Planar reference trajectory in speed, glide angle, spin rate
		Attitude perturbations in sideslip angle, roll angle, yaw angle
		Trajectory equations are uncoupled from attitude equations, so they can be run independantly
	! Internal 'sim_time' is in dynamic normalized time 
	* Note: TIMING inputs and ENDTIME are in DNT (Dynamic Normalized Time units, not seconds)
	* Reference: 'On Flight Dynamics of Magnus Rotors', Tech Report 117, DTIC AD 716345, NOv 1970
		Programmed equations are from Table 12.1
	* Hierarchical class structure

								Cadac
								  |
		     					Rotor
							    
	* Event scheduling with insertion of new data
	* Modular structure and communication
	* Variable types: real (double precision), integer, matrices 
	* Common communication bus for all objects
	* Output options compatible with CADAC Studio
	* Single step Modified Euler Midpoint integration 
	* Matrix operations executed just like scalar operations 
	* Table look-up with linear interpolation for 1,2 and 3 independent variables (not used)
	* CADAC++ written for full-width console display (Windows 7, 2000, XP)
	* Compiler: Microsoft Visual C++ 8, 9, 10, 12 ANSI/ISO Std 1998
	* System of units: SI (exceptions have an 'x' appended, e.g.: deg, dynamic normalized units)

* Terminology:
	'vehicles' means rotors
	'ROTOR' is an identifier of A Magnus rotor object of class 'Rotor'

* Input file 'input.asc':
	* Upper case words are key-words
	* Every single line entry starts with a key-word 
	* Every block of data starts with key-word and ends with 'END'
	* Comments identified by leading '//' either on new-line or after data entry
	* Comments permitted everywhere, except between 'OPTIONS' and 'VEHICLES'
	* No blank lines between MODULES ... END
	* First line must start with 'TITLE'
	* OPTIONS line determines output:
		y_scrn:		'ROTOR'-object data are displayed on  screen in 'scrn_step' intervals 
		y_events:	'events' are written to screen
		y_tabout:	screen output is also written to file 'tabout.asc' (without 'events')
		y_plot:		plotting data are written to files 'ploti.asc', i=1,2,3,... objects
		y_merge:	files 'ploti.asc', i=1,2,3,... are merged to file 'plot.asc'
		y_doc:		the module-variables are written to file 'doc.asc'; file 'input.asc'
					  is documented, and misspellings are identified; the previous 'input.asc'
					  file is saved as 'input_copy.asc'  
		y_comscrn:	the 'combus' data are written to the screen ('ROTOR' objects)
		y_traj:		the 'combus' data are written to files 'traj.asc' for plotting 
	* Any combination of y_scrn, y_events and y_comscrn is possible
	* 'VEHICLES' must be followed by the number of total vehicle objects (rotors)
	* Assign values to variables without equal sign!
	* Real and integer variables can be used as input, but not vector variables
	* Events (only possible for 'ROTOR' objects) start with 'IF' and end with 'ENDIF'. 
		Number of events limited by NEVENT. Number of new variables are limited by 'NVAR'.
	    Both are set in 'global_constants.hpp'
	* Event criteria: >, =, <
	* Designating words  are inserted after the vehicle object 'ROTOR'to identify the
		individual objects
	* The timing is governed by the time step variables
		scrn_step	output to screen and tabout.asc
		plot_step	output to plot files
		traj_step	output to traj.asc file
		com_step	output of 'combus' to screen 
		int_step	integration step
	* 'ENDTIME' defines the termination time of the run
	* 'STOP' must be the last entry

* Output:
	* Files 'ploti.asc', 'plot.asc', 'traj.asc' can be plotted using CADAC Studio
	* Output to screen has two 'time=0' blocks. 1st is written after module initialization,
		2nd is written after first integration (integration 'time' is incremented after
		execution of all code.
	* First entry to 'ploti.asc', 'plot.asc', 'traj.asc' is at 'time=0', after first
		 integration step
	* Labels in files for CADAC-Studio are truncated to 8 characters 

* Modules
	* Modules represent the model of a vehicle component
	* The calling sequence is established in 'input.asc'
	* Each module may consists of as many as four parts ('def' and 'exec' are mandatory):
		def		definition of module-variables (called once)
		init	initial calculations (optional, called once)
		exec	actual module execution (called once every integration)
		term	terminal calculations (optional, called once)
	* Modules communicate amongst each other by module-variables, stored in array 'rotor[]'
	* 'ROTOR' objects use 'rotor[]' array
	* Make sure that the global constant 'NROTOR' is large enough
		for dimensioning 'rotor[]' 
	* The module-variables are defined in the 'def_xxx' functions (xxx = module name)
	* Module-variables can be real (double), integers, 3x1 or 3x3 matrices (capitalized)
	* Follow the examples in the 'def_modulename' functions to specify module-variables
	* The following sequence must be maintained in the definition: 
		"name",inial values,"int","definiton","declaring module","purpose","output"
		 Note: "name" must be lower case for real and integer variables;
			   "name" must be upper case for 3x1 and 3x3 vectors and matrices
			   "name" is a literal string; no white spaces (they will become part of the name)
			   "int" is present only for integers
	* Meaning of abbreviations in the module-variable definitions:
		"int" integer
		"data" input data
		"init" initialization
		"state" state variable to be integrated
		"save" saving value for next integration cycle
		"diag" diagnostic output, not used by other modules
		"out" output to other modules		 
	* Use key-words to select module-variables for output (with appropriate 'OPTIONS' in 'input.asc'):
		"scrn" scrolled to screen and written to 'tabout.asc'
		"plot" written to 'ploti.asc', i=1,2,3,... and merged to 'plot.asc'
		"com" stored in 'combus', scrolled to screen and written to 'traj.asc'
	* Module-variables are localized in module-functions by 'Variable' class member functions:
		real(), integer(), vec(), mat()
	* Module-variables are loaded into module-variable arrays by 'Variable" class member functions:
		gets(name) for real and integer
		gets_vec(NAME) for 3x1 vectors
		gets_mat(NAME) for 3x3 matrices
			example: rotor[141].gets_vec(SBEL);
	* Module-variables are documented in file 'doc.asc'

* Tables
	* Tables are stored in seperate data decks in one, two, or three dimensions
	* Their file name is identified in 'input.asc' after the key words AERO_DECK or PROP_DECK
	* They are accessed in the modules by 'double aerotable.look-up(string "name", double var1,...)'
		or  'double proptable.look-up(string "name", double var1,...)'
	* To add tables, appended them to the existing data decks	   
	
* Communication bus 'combus'
	* 'combus' stores and makes available a packet of data of each vehicle to other vehicles
	* 'Packet' consists of:
		'id'	  identification code of vehicle object ('p'=rotor)
		'status'  alive=1, dead=0
		'ndata'	  number of module-variables in data array
		'data[]'  data of module-variables selected by "com"
	* Packets are recorded at 'int_step' intervals ('input.asc')
	* 'combus' data scrolled to screen (use:'y_comscrn') and/or to 'traj.asc' (use:'y_traj')
		at 'com_step' intervals  ('input.asc')
	* To subscribe to 'combus' data, use 'Packet' class member functions:
		get_id()
		get_status()
		get_ndata()
		get_data()	
			example:Variable *data_cj=combus[i].get_data();
				double dvbe_cj=data_cj[k].real();
				i = 0,1,2,... packet # in ;'combus' container
				j = i+1 = vehicle object sequence established by 'input.asc' vehicle sequence
				k = 0,1,2,... variable index established by the "com" sequence (see 'doc.asc')
			 
* Error checking of module-variable definitions (set flag 'y_doc')
	* Rule violations are flagged in 'doc.asc'
		* if a location is reused -> Error flag '*': duplicate location
			Correction: in module-defintions find duplicate use and correct it
		* if a name is reused -> Error flag 'A': duplicate name
			Correction: in module-defintions find duplicate use and correct it
	* Module-variable misspelled in 'input.asc' will be appended with error message
		Correction: get correct spelling from 'doc.asc' and make correction in 'input.asc'  	 

* Programming Conventions 
	* Program in compliance with ANSI/ISO 98 only
	* Write compact code: no unnecessary white spaces
	* Global constants have all caps
	* Class and structure names start with capital letter, otherwise lower case
	* Compounded names are separated by underscore
	* Function names have all lower case letters
	* File names have all lower case letters
	* Do not make a single letter a variable name (exceptions counters, indices)
	* In comments use single quotes to identify names in program (variable, function, class, etc)
	* Comments occupy their own full line(s); start with lower case
	* Temporary in-line comments for debugging only; start with lower case 
	* In Modules: vectors and tensors are named with all caps, scalars all lower case
	* In input files: Key words have all caps
	* Counters start at 0 (offset index)
	* No 'static' variables in modules allowed

* Helps
	* Check sizing of arrays for adequate space (located in 'global_constants.hpp')
			 NROTOR		size of 'rotor' module-variable array 
			 NEVENT		max number of events
			 NVAR		max number of variables to be input at every event
	* Do not use '=' sign in any assignments of 'input.asc'; except in 'event' criteria 
	* Make sure, spelling of variable names is correct in 'input.asc'
	* Make sure every variable has been given a numerical value 
	* When execution problems arise, check first array allocations of 'global_constants.hpp'
	* If only banner (TITLE) appears on console, a hang-up occurred because of errors in 'input.asc.
		Check for misspellings and that all variables have a value assigned without equal sign 
	* If a variable is misspelled in 'input.asc' its initial value, set in the def_module, 
		will not be replaced by the values from 'input.asc'		

* Code Debugging Helps
	* 'Heap' problems during debug with following message:
			 " If this ASSERT fails, a bad pointer has been passed in. It may be
			   totally bogus, or it may have been allocated from another heap.
			   The pointer MUST come from the 'local' heap."
			 _ASSERTE(_CrtIsValidHeapPointer(pUserData));
	  >>> If this problem occurs, check the array dimensioning in 'global_constants.hpp'
	* Class member variable: 
		do not declare a class member variable as local variable in a function
	* Beware of abs(); it will return an integer. For real variables use fabs()
	* Memory Error: Make sure that all 'fstream' objects are passed by reference
	* Debugger stops with 'code 1', if an out-of-bounds element of a matrix is displayed in the watch window 
	* In the watch window, if you use the overloaded operator [] to display matrix elements, delete it after use 
	* "Memory could not be written" run-time error could be due to declaration of a 'Matrix' variable
	   without dimensioning it
	
* Limitations
	* Module-variables of type'Matrix' are restricted to 3x1 and 3x3 arrays (but not local variables inside functions)
	* 'input.asc' does not support 'Matrix' variables, only components
		



			