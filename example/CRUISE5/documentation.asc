**********************************************************************************************
***************************************** CADAC++ ********************************************
**********************************************************************************************
************************************ CRUISE5 Simulation **************************************
**********************************************************************************************

* Release 3.0, 3 July 2013
* Release 2.0, 1 Sep 2007
* Features of simulation
	* 3 DoF, round, rotating earth; coordinates: longitude, latitude, altitude
	* Cruise missile:
		drag polars, functions of Mach
		turbojet propulsion deck
		controllers: flight path angles, accelerations, altitude
		guidance: line guidance, point guidance, arc guidance, pro-nav
		seeker: simple line-of-sight 
	* Targets fixed, constant speed or accelerated
	* Satellites orbiting the Earth, providing coordinates of (moving) targets 
	* Hierarchical class structure

										Cadac										   
										  |
										Round3							    		 			
								/	      |	    	\
							Target 	    Cruise    Satellite

	* Event scheduling with insertion of new data
	* Modular structure and communication
	* Variable types: real (double precision), integer, matrices 
	* Common communication bus for all objects
	* Output options compatible with CADAC Studio
	* Single step modified Euler integration
	* Matrix operations executed just like scalar operations 
	* Table look-up with linear interpolation for 1,2 and 3 independent variables
	* CADAC++ written for full-width console display (Windows XP, Vista, 7)
	* Compiler: Microsoft Visual C++ V12 and earlier; ANSI/ISO Std 1998
	* System of units: SI (exceptions have an 'x' appended)

* Terminology:
	'vehicles' means cruise missiles, targets, or satellites
	'CRUISE3' is an identifier of a cruise  missile object of class 'Cruise', in 3 DoF
	 (also sometimes called 'pseude 5 DoF', because it includes pitch and bank degrees of freedom)    
	'TRAGET3' is an identifier of a target object of class 'Target', in 3 DoF over round earth
	'SATELLITE3' is an identifier of a satellite object of class 'Satellite',
				 in 3 DoF over round earth
	The word 'slot' always refers to the the slot # (0,1,...) in the 'vehicle_list'
	The word 'index' refers to the index number (0,1,...) in the respective module-variable array 

* Input file 'input.asc':
	* Upper case words are key-words
	* Every block of data starts with key-word and ends with 'END'
	* Comments are identified by leading '//', either starting a new-line or after data entry
	* Comments permitted everywhere, except between 'OPTIONS' and 'VEHICLES'
	* No blank lines between MODULES ... END
	* First line must start with 'TITLE'
	* Second line starting with 'OPTIONS' determines output:
		y_scrn:		'CRUISE3'-object data are displayed on  screen in 'scrn_step' intervals 
		y_events:	'events' are written to screen
		y_tabout:	screen output is also written to file 'tabout.asc' (without 'events')
		y_plot:		plotting data are written to files 'ploti.asc', for each i=1,2,3,... objects
		y_merge:	files 'ploti.asc', i=1,2,3,... are merged to file 'plot.asc'
		y_doc:		the module-variables are written to file 'doc.asc' for documentation
		y_comscrn:	the 'combus' data are written to the screen ('CRUISE3','TARGET3','SATELLITE3' objects)
		y_traj:		the 'combus' data are written to files 'traj.asc' for plotting 
	* Any combination of y_scrn, y_events and y_comscrn is possible
	* 'VEHICLES' must be followed by the number of total vehicle objects (cruise missiles, targets, and satellites)
	* 'CRUISE3', 'TARGET3' and 'SATELLITE3' can be in any order. Their 'packets' are stored in 'combus'
	* Assign values to variables without equal sign!
	* Real and integer variables can be used as input, but not array variables
	* Events, only possible for 'CRUISE3' objects; start with 'IF watch variable' and end with 'ENDIF'. 
		Number of events limited by 'NEVENT'. Number of new variables are limited by 'NVAR'.
	    Any module-variable can serve as watch variable
		  But do not use 'event_time' as watch variable in the first event criteria
		Event criteria: >, =, < with blanks before and after symbol
	* Characters after the vehicle objects 'CRUISE3', 'TARGET3' or 'SATELLITE3' are inserted into the console
		 output to identify the individual objects
	* The timing is governed by the time step variables (in seconds)
		scrn_step	output to screen
		plot_step	output to plot files
		traj_step	output to 'traj.asc' file
		com_step	output of 'combus' to screen 
		int_step	integration step
	* 'int_step' may be changed at Events by 'int_step_new' if there is only one CRUISE3 object
	    (no TARGET3 nor SATELLITE3 objects),or, if the watch variable is 'time'
	    with the same value for all CRUISE3 objects    
	* Output step sizes may be changed by the common 'out_step_fact', e.g.: scrn_step*(1+out_step_fact),
	   if there is only one CRUISE3 object (no TARGET3 nor SATELLITE3 objects), or, if the watch variable is 'time'
	     with the same value for all CRUISE3 objects. Applies to the step sizes of all output files	      		
	* Tabular data is read from data files, whose names are declared after the key words 
	   'DATA_DECK' and 'PROP_DECK'. One, two, and three-dim table look-ups are provided with
	    constant extrapolation at the upper end and slope extrapolation at the lower end
	* 'ENDTIME' defines the termination time of the run
	* 'STOP' must be the last entry

* Output:
	* Files 'ploti.asc', 'plot.asc', 'traj.asc' can be plotted using CADAC Studio
	* Output to screen has two 'time=0' blocks. 1st is written after module initialization,
		2nd is written after first integration (integration 'time' is incremented after
		execution of all code.
	* First entry in 'ploti.asc', 'plot.asc', 'traj.asc' is at 'time=0', after first
		 integration step
	* Vector (3x1) output is automatically decomposed into components
	* Output step sizes may be changed during the run by the common 'out_step_fact',
	    e.g.: scrn_step*(1+out_step_fact), if there is only one CRUISE3 object, or,
	     if the watch variable is 'time' with the same valuefor all CRUISE3 objects.
	     Applies to the step sizes of all output files  	      		

* Modules
	* Modules represent the model of a physical sub-system
	* The calling sequence is established in 'input.asc'
	* Each module may consists of as many as four parts (see 'input.asc'):
		def		definition of module-variables (called once)
		init	initial calculations (optional, called once)
		exec	actual module execution (called once every integration)
		term	terminal calculations (optional, called once)
	* Module communicate amongst each other by module-variables, stored in arrays
		 'round3[]', 'cruise[]', 'target[]' and 'satellite[]'
	* 'CRUISE3' objects use 'round3[]' and 'cruise[]' arrays
	* 'TARGET3' objects use 'round3[]' and 'target[]' arrays
	* 'SATELLITE3' objects use 'round3[]' and 'satellite[]' arrays
	* Make sure that the global constants 'NROUND3', 'NCRUISE', 'NTARGET' and 'NSATELLITE' are large enough
		for dimensioning 'round3[]', 'cruise[]', 'target[]' and 'satellite[]' 
	* The module-variables are defined in the 'def_xxx' functions (xxx = module name)
	* Module-variables can be real (double), integers or 3x1 vectors (vectors must be all caps)
	* Follow the examples in the 'def_modulename()' functions to specify module-variables
	* The following sequence must be maintained in the definition: 
		"name",inial values,"int","definiton","declaring module","purpose","output"
		 Note: "name" must be lower case for real and integer variables;
			   "name" must be upper case for 3x1 vectors and 3x3 and matrices
			   "name" is a literal string; no white spaces (they will become part of the name)
			   "int" is present only for integers
	* Meaning of abbreviations in the module-variable definitions:
		"int" integer
		"data" input data
		"init" initialization
		"state" state variable to be integrated
		"diag" diagnostic output, not used by other modules
		"out" output to other modules
	* Use key-words to select module-variables for output (with appropriate 'OPTIONS' in 'input.asc'):
		"scrn" scrolled to screen and written to 'tabout.asc'
		"plot" written to 'ploti.asc', i=1,2,3,... and merged to 'plot.asc'
		"com" stored in 'combus', scrolled to screen and written to 'traj.asc'
	* Module-variables are localized in module-functions by 'Variable' class member functions:
		real(), integer(), vec(), mat()
			example: double alphax=cruise[51].real();
	* Module-variables are loaded into module-variable arrays by 'Variable" class member functions:
		gets(name) for real and integer
		gets_vec(NAME) for 3x1 vectors
		gets_mat(NAME) for 3x3 matrices
			Example: cruise[51].gets(alphax);
			Example: round3[35].gets_vec(SBII);
	* Module-variables are documented in file 'doc.asc'
	* Timing variables
		Timing variables are set in the 'environment' module
		'environment' module must be called first, so that the same timing applies to all modules
		'time', round3[0], is the time of the trajectory since start (same for all vehicle objects)
		'event_time' round3[1], is the time elapsed since initiation of and event
			Do not use 'event_time' as the watch variable of the first event
		
* Communication bus 'combus'
	* 'combus' stores and makes available a packet of data of each vehicle to other vehicles
	* Data loaded into packet are identified by keyword 'com' in the module-variable definition
	* Sequence of loading data is estabished first by the vehicle class hierarchy, and then by the
	   module calling sequence. (verifiable by the 'combus' screen display)  
	* 'Packet' consists of:
		'id'		identification code of vehicle object ('c'=cruise, 't'=target')
		'status'	alive=1, dead=0
		'ndata'		number of module-variables in data array
		'data[]'	data of module-variables selected by "com"
	* Packets are recorded at 'int_step' intervals ('input.asc')
	* 'combus' data scrolled to screen (use:'y_comscrn') and/or to 'traj.asc' (use:'y_traj')
		at 'com_step' intervals 
	* To interrogate 'combus' data, use 'Packet' class member functions:
		get_id()
		get_status()
		get_ndata()
		get_data()	
			Example: Variable *data=combus[i].get_data();
				double dvbe=data[k].real();
				i = 0,1,2,... packet # in 'combus'
				k = 0,1,2,... variable index established by the "com" sequence (see 'doc.asc')
	* Limitations
		Module-variables can only be integers, real or (3x1)vectors, not matrices
		Module-variables in the 'data[]' array are identified by their sequential number
				k = 0,1,2,... variable index established by the "com" sequence (see 'doc.asc')
* Automatic error checking of module-variable definitions (set flag 'y_doc')
	* Rule violations are flagged in 'doc.asc'
		* if a location is reused -> Error flag '*': duplicate location
			Correction: in module-defintions find duplicate use and correct it
		* if a name is reused -> Error flag 'A': duplicate name
			Correction: in module-defintions find duplicate use and correct it
	* Module-variable misspelled in 'input.asc' will be appended with error message
		Correction: get proper spelling from 'doc.asc' and make correction in 'input.asc'  	 
	* If 'input.asc' contains a reused name, it will be corrupted during execution
		Correction: Deconflict reuse and use 'input_copy.asc'   	 

* Programming Conventions 
	* Program in compliance with ANSI/ISO 98 only
	* Write compact code: no unnecessary white spaces
	* Global constants have all caps
	* Class and structure names start with capital letter, otherwise lower case
	* Compounded names are separated by underscore
	* Function names have all lower case letters
	* File names have all lower case letters
	* Do not make a single letter a variable name (exceptions counters, indices)
	* In comments use single quotes to identify names in program (variable, function, class, etc)
	* Comments occupy their own full line(s), preceded by blank line; start with lower case
	* Temporary in-line comments for debugging only; start with lower case 
	* In modules: vectors and tensors are named with all caps, scalars all lower case
	* In input files: key words have all caps
	* Counters start at 0
	* No 'static' variables in modules allowed

* Helps
	* Check sizing of arrays for adequate space (located in 'global_constants.hpp')
			 NROUND3	size of 'round3' module-variable array
			 NCRUISE	size of 'cruise' module-variable array 
			 NTARGET	size of 'target' module-variable array
			 NSATELLITE	size of 'satellite' module-variable array
			 NEVENT		max number of events
			 NVAR		max number of variables to be input at every event
	* Do not use '=' sign in any assignments of 'input.asc'; except in 'event' criteria
	* Make sure, spelling of variable names is correct in 'input.asc'
	* When execution problems arise, check first array allocations of 'global_constants.hpp'
	* If only banner (TITLE) appears on console, a hang-up occurred because of errors in 'input.asc.
		Check for misspellings and that all variables in 'input.asc' have a value 
	* If a variable is misspelled in 'input.asc' its initial value, set in the def_module, 
		will not be replaced by the values from 'input.asc'
	* The event criteria require at least one white space on both sides, otherwise the event will fail		
	* In 'input.asc' make sure that entries for each vehicle object terminate with 'END' 			
	* When you define vectors and matrices in 'def_xxx()' make sure that ALL elements are initialized 
	* Programming with the 'Matrix' class
		Multiplying a matrix with a scalar, the scalar must be appended. Example: Matrix VD=ABII*int_step;
		Dividing two matrix components is legitimate. Example:  double angle=VD[1]/VD[2];
	* If 'input.asc' is not beeing refreshed, set: 'y_doc'	     
	* If merging of plot files fails (run hangs up), the length of the TITLE may be too long
	  
* Code Debugging Helps
	* If 'Heap' error messages appear, check the array dimensioning in 'global_constants.hpp'
	* Class member variable: 
		do not declare a class member variable as local variable in a function
	* Beware of abs(); it will return an integer. For real variables use fabs()
	* Memory Error: Make sure that all 'fstream' objects are passed by reference
	* Debugger will stop with 'code 1" if an out-of-bounds element of a matrix is displayed in the watch window
	* Run-time error 'Memory could not be written' may be due to false declaration of a 'Matrix' variable
	* In the watch window, if you use the overloaded operator [] to display matrix elements,
	   delete the variables  after use 
	* If you get "fatal error C1001: INTERNAL COMPILER ERROR", set compiler optimization to 'default'
	* Adding code to single line 'if' statements that are not delineated by {} causes hard to detect errors
	* MS C++7 only: If degubber does not stop at a break point, go to 'Properties'->'Debugging'->'Degugger type'
	  and set to 'managed only'   
	
* Limitations
	* Module-variables of type'Matrix' are restricted to 3x1 and 3x3 arrays (but not local variables inside functions)
	* 'input.asc' does not support any 'Matrix' variables, only scalar components
	* Only main vehicle object CRUISE3 supports 'event' phasing

			